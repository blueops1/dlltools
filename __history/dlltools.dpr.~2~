library dlltools;

{ Important note about DLL memory management: ShareMem must be the
  first unit in your library's USES clause AND your project's (select
  Project-View Source) USES clause if your DLL exports any procedures or
  functions that pass strings as parameters or function results. This
  applies to all strings passed to and from your DLL--even those that
  are nested in records and classes. ShareMem is the interface unit to
  the BORLNDMM.DLL shared memory manager, which must be deployed along
  with your DLL. To avoid using BORLNDMM.DLL, pass string information
  using PChar or ShortString parameters. }

uses
  SysUtils,
  Classes,
  Variants,
  Grids,
  ComObj,
  Printers,
  Windows,
  Messages,
  Graphics,
  Dialogs,
  Controls,
  forms;

Function AboutMe(Yhw:string) :string;stdcall;
  begin
    if Yhw='Yyh' then
      result:='Yhw'
    else
      result:='Hyf'
  end;

Function ExportStrGridToExcel(Args: array of const): Boolean;stdcall;
var iCount, jCount: Integer;
	XLApp: Variant;
	Sheet: Variant;
	I: Integer;
 begin
	Result := False;
	if not VarIsEmpty(XLApp) then
	begin
		XLApp.DisplayAlerts := False;
		XLApp.Quit;
		VarClear(XLApp);
	end;
	try
		XLApp := CreateOleObject('Excel.Application');
	except
		Exit;
	end;
	XLApp.WorkBooks.Add;
	XLApp.SheetsInNewWorkbook := High(Args) + 1;
	for I := Low(Args) to High(Args) do
	begin
		with TStringGrid(Args[I].VObject) do
		begin
			XLApp.WorkBooks[1].WorkSheets[I+1].Name := Name;
			Sheet := XLApp.Workbooks[1].WorkSheets[Name];
			for jCount := 0 to RowCount - 1 do
			begin
				for iCount := 0 to ColCount - 1 do
				begin
					Sheet.Cells[jCount + 1, iCount + 1] := Cells[iCount, jCount];
				end;
			end;
		end;
	end;
	XlApp.Visible := True;
 end;

 Function SplitString(Source, Deli: string ): String;stdcall;
 var
    EndOfCurrentString: byte;
    StringList:TStringList;
 begin
    StringList:=TStringList.Create;
    while Pos(Deli, Source)>0 do
    begin
      EndOfCurrentString := Pos(Deli, Source);
      StringList.add(Copy(Source, 1, EndOfCurrentString - 1));
      Source := Copy(Source, EndOfCurrentString + length(Deli), length(Source) - EndOfCurrentString);
    end;
    Result := StringList[0];
    StringList.Add(source);
end;

function CharHeight: Word;stdcall;
var
    Metrics: TTextMetric;
begin
    GetTextMetrics(Printer.Canvas.Handle, Metrics);
    Result := Metrics.tmHeight;
end;

//取得字符的平均宽度
function AvgCharWidth: Word;stdcall;
var
    Metrics: TTextMetric;
begin
    GetTextMetrics(Printer.Canvas.Handle, Metrics);
    Result := Metrics.tmAveCharWidth;
end;

//取得纸张的物理尺寸---单位：点
function GetPhicalPaper: TPoint;stdcall;
var
    PageSize : TPoint;
begin
    //PageSize.X/; 纸张物理宽度-单位:点
    //PageSize.Y/; 纸张物理高度-单位:点
    Escape(Printer.Handle, GETPHYSPAGESIZE, 0,nil,@PageSize);
    Result := PageSize;
end;

//取得纸张的逻辑宽度--可打印区域,取得纸张的逻辑尺寸
function PaperLogicSize: TPoint;stdcall;
var
    APoint: TPoint;
begin
    APoint.X := Printer.PageWidth;
    APoint.Y := Printer.PageHeight;
    Result := APoint;
end;

//纸张水平对垂直方向的纵横比例
function HVLogincRatio: Extended;stdcall;
var
    AP: TPoint;
begin
    Ap := PaperLogicSize;
    Result := Ap.y/Ap.X;
end;

//取得纸张的横向偏移量-单位：点
function GetOffSetX: Integer;stdcall;
begin
    Result := GetDeviceCaps(Printer.Handle, PhysicalOffSetX);
end;

//取得纸张的纵向偏移量-单位：点
function GetOffSetY: Integer;stdcall;
begin
    Result := GetDeviceCaps(Printer.Handle, PhysicalOffSetY);
end;

//毫米单位转换为英寸单位
function MmToInch(Length: Extended): Extended;stdcall;
begin
    Result := Length/25.4;
end;

//英寸单位转换为毫米单位
function InchToMm(Length: Extended): Extended; stdcall;
begin
    Result := Length*25.4;
end;

//取得水平方向每英寸打印机的点数
function HPointsPerInch: Integer;stdcall;
begin
    Result := GetDeviceCaps(Printer.Handle, LOGPIXELSX);
end;

//取得纵向方向每英寸打印机的光栅数
function VPointsPerInch: Integer;stdcall;
begin
    Result := GetDeviceCaps(Printer.Handle, LOGPIXELSY)
end;

//横向点单位转换为毫米单位
function XPointToMm(Pos: Integer): Extended;stdcall;
begin
    Result := Pos*25.4/HPointsPerInch;
end;

//纵向点单位转换为毫米单位
function YPointToMm(Pos: Integer): Extended;stdcall;
begin
    Result := Pos*25.4/VPointsPerInch;
end;

//设置纸张高度-单位：mm
procedure SetPaperHeight(Value:integer);stdcall;
var
    Device : array[0..255] of char;
    Driver : array[0..255] of char;
    Port : array[0..255] of char;
    hDMode : THandle;
    PDMode : PDEVMODE;
begin
    //自定义纸张最小高度127mm
    if Value < 127 then Value := 127;
    //自定义纸张最大高度432mm
    if Value > 432 then Value := 432;
    Printer.PrinterIndex := Printer.PrinterIndex;
    Printer.GetPrinter(Device, Driver, Port, hDMode);
    if hDMode <> 0 then
    begin
        pDMode := GlobalLock(hDMode);
        if pDMode <> nil then
        begin
            pDMode^.dmFields := pDMode^.dmFields or DM_PAPERSIZE or DM_PAPERLENGTH;
                        pDMode^.dmPaperSize := DMPAPER_USER;
            pDMode^.dmPaperLength := Value * 10;
            pDMode^.dmFields := pDMode^.dmFields or DMBIN_MANUAL;
            pDMode^.dmDefaultSource := DMBIN_MANUAL;
            GlobalUnlock(hDMode);
        end;
    end;
    Printer.PrinterIndex := Printer.PrinterIndex;
end;

//设置纸张宽度：单位--mm
Procedure SetPaperWidth(Value:integer); stdcall;
var
    Device : array[0..255] of char;
    Driver : array[0..255] of char;
    Port : array[0..255] of char;
    hDMode : THandle;
    PDMode : PDEVMODE;
begin
    //自定义纸张最小宽度76mm
    if Value < 76 then Value := 76;
    //自定义纸张最大宽度216mm
    if Value > 216 then Value := 216;
    Printer.PrinterIndex := Printer.PrinterIndex;
    Printer.GetPrinter(Device, Driver, Port, hDMode);
    if hDMode <> 0 then
    begin
        pDMode := GlobalLock(hDMode);
        if pDMode <> nil then
        begin
            pDMode^.dmFields := pDMode^.dmFields or DM_PAPERSIZE or
            DM_PAPERWIDTH;
            pDMode^.dmPaperSize := DMPAPER_USER;
            pDMode^.dmPaperWidth := Value * 10;  //将毫米单位转换为0.1mm单位
            pDMode^.dmFields := pDMode^.dmFields or DMBIN_MANUAL;
            pDMode^.dmDefaultSource := DMBIN_MANUAL;
            GlobalUnlock(hDMode);
        end;
    end;
    Printer.PrinterIndex := Printer.PrinterIndex;
end;

//在 (Xmm, Ymm)处按指定配置文件信息和字体输出字符串
procedure PrintText(Txt: string;item:string;configfilename:string);stdcall;
var
    OrX, OrY: Extended;
    Px, Py,x,y: Integer;
    AP: TPoint;
    Fn: TStrings;
    FileName: string;
    OffSetX, OffSetY: Integer;
begin
    //打开配置文件，读出横向和纵向偏移量
    try
        Fn := TStringList.Create;
        FileName := ExtractFilePath(Application.ExeName) + ConfigFileName;
        if FileExists(FileName) then
        begin
            Fn.LoadFromFile(FileName);
            OffSetX := StrToInt(Fn.Values['右移']); //横向偏移量
            OffSetY := StrToInt(Fn.Values['下移']); //纵向偏移量
                X := strtoint(Fn.Values[item+'X']) + OffSetX;
    Y := strtoint(Fn.Values[item+'y']) + OffSetY;
    Px := Round(Round(X * HPointsPerInch * 10000/25.4) / 10000);
    Py := Round(Round(Y * VPointsPerInch * 10000/25.4) / 10000);
    Py := Py - GetOffSetY; //因为是绝对坐标, 因此, 不用换算成相对于Y轴坐标
    Px := Px + 2 * AvgCharWidth;
    Printer.Canvas.Font.Name := Fn.Values[item+'font'];
    Printer.Canvas.Font.Size := strtoint(Fn.Values[item+'FontSize']);
        end
        else
        begin
        //如果没有配置文件，则生成
        Fn.Values['右移'] := '0';
        Fn.Values['下移'] := '0';
        Fn.SaveToFile(FileName);
        end;
    finally
        Fn.Free;
    end;

    //Printer.Canvas.Font.Color := clGreen;
    Printer.Canvas.TextOut(Px, Py, Txt);
end;


{$R *.res}

exports
AboutMe,
//取得分割字符的第一个字符
SplitString,
//stringgrid导出到execl;
ExportStrGridToExcel,
//取得字符的高度
CharHeight,
//取得字符的平均宽度
AvgCharWidth,
//取得纸张的物理尺寸---单位：点
GetPhicalPaper,
//取得纸张的逻辑宽度--可打印区域,取得纸张的逻辑尺寸
PaperLogicSize,
//纸张水平对垂直方向的纵横比例
HVLogincRatio,
//取得纸张的横向偏移量-单位：点
GetOffSetX,
//取得纸张的纵向偏移量-单位：点
GetOffSetY,
//毫米单位转换为英寸单位
MmToInch(Length: Extended),
//英寸单位转换为毫米单位
InchToMm(Length: Extended),
//取得水平方向每英寸打印机的点数
HPointsPerInch,
//取得纵向方向每英寸打印机的光栅数
VPointsPerInch,
//横向点单位转换为毫米单位
XPointToMm(Pos: Integer),
//纵向点单位转换为毫米单位
YPointToMm(Pos: Integer),
//设置纸张高度-单位：mm
SetPaperHeight(Value:integer),
//设置纸张宽度：单位--mm
SetPaperWidth(Value:integer),
//在 (Xmm, Ymm)处按指定配置文件信息和字体输出字符串
PrintText(Txt: string;item:string;configfilename:string);

begin

end.
